#! /usr/bin/env bash
# Usage: ./makePDF example.tex
# Purpose: Single bash script to cleanly build LaTeX PDF and remove auxiliary files

###################################################
# Define function to clean all auxiliary files
###################################################

FUNCTION_clean_aux_files () {
   rm -f $input_tex_clean.aux;
   rm -f $input_tex_clean.acn;
   rm -f $input_tex_clean.acr;
   rm -f $input_tex_clean.alg;
   rm -f $input_tex_clean.bbl;
   rm -f $input_tex_clean.lof;
   rm -f $input_tex_clean.out;
   rm -f $input_tex_clean.toc;
   rm -f $input_tex_clean.xdy;
   rm -f $input_tex_clean.log;
   rm -f $input_tex_clean-blx.bib;
   rm -f $input_tex_clean.lot;
   rm -f $input_tex_clean.lot;
   rm -f $input_tex_clean.blg;
   rm -f $input_tex_clean.run.xml;
   rm -f $input_tex_clean.glsdefs;
   rm -f $input_tex_clean.gz;
   rm -f $input_tex_clean.hst;
   rm -f $input_tex_clean.ver;
   rm -f makePDF.out;
}

###################################################
# Define function rename output
###################################################

FUNCTION_rename_output_pdf () {
   if [ "$rename_output" = true ]; then
      output_pdf=${OUTPUT}
      output_pdf_clean=${output_pdf%.*};
      mv $input_tex_clean.pdf ${output_pdf_clean}.pdf
      printf '\e[0;32m PDF printed to \e[1;32m%s\e[0m \n' $output_pdf_clean.pdf;
   else
      printf '\e[0;32m PDF printed to \e[1;32m%s\e[0m \n' $input_tex_clean.pdf;
   fi
}

###################################################
# Check the current TeX version
###################################################

# Get TeX version
tex_version="$(tex --version)";

# Make sure latest version is installed
if [[ $tex_version == *"2015"* ]]; then
   printf  "\t\e[1;34m--- Running TeX Distribution Version 2015 ---\e[0m \n";
else
   printf '\n\t\e[1;31m!!! Outdated TeX Distribution - Please UPDATE !!!\e[0m \n';
   printf "\e[0;34m(Current Version) Environment \$PATH points to: "; which tex; printf "\e[0m";
   tex --version | head -3 | sed 's/^/  /';
   printf '\n'
   exit 1;
fi

###################################################
# Check if input file passed in
###################################################

# Strip the input file name of its extension
input_tex=$1;
input_tex_clean=${input_tex%.*};

# Check if there is a file input, else exit
if [ -z "$1" ]
  then
    printf 'No buildable .tex file supplied as input: e.g.\e[1;34m "support/makePDF template.tex"\e[0m \n';
    exit 1
fi

###################################################
# Parse the command line inputs
###################################################

# Define fast build as false
fast_build=false

for i in "$@"
do
case $i in
   -o=*|--outputname=*)
   OUTPUT="${i#*=}"
   rename_output=true
   shift # -o argument=value
   ;;
   -p=*|--latexpath=*)
   LATEXPATH="${i#*=}"
   shift # -p argument=value
   ;;
   -c*|--clean*)
   clean_aux=true
   shift # -c argument=value
   ;;
   -f*|--fast*)
   fast_build=true
   shift # -c argument=value
   ;;
   *)
         # unknown option
   ;;
esac
done

###################################################
# Define necessary environment paths
###################################################

# Save current internal field separator setting
SAVEIFS=$IFS

# Set internal field separator to be line break instead of space character
IFS=$'\n'

# Get directory of this script and find all sub-directories
nasa_latex_docs_pwd="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"
subdirs_in_nasa_latex_docs=$(find $nasa_latex_docs_pwd -type d | tr '\n' ':')

# Get path of the file being built and find all sub-directories
subdirs_in_path2file=$(find $PWD -type d | tr '\n' ':')

# Recursively add above paths and sub folders to TeX search path
export TEXINPUTS=$TEXINPUTS$subdirs_in_nasa_latex_docs$subdirs_in_path2file
export TEXMFHOME=$TEXMFHOME$subdirs_in_nasa_latex_docs$subdirs_in_path2file
export BIBINPUTS=$BIBINPUTS$subdirs_in_nasa_latex_docs$subdirs_in_path2file

# Restore internal field separator setting to previous state
IFS=$SAVEIFS

###################################################
# Build the pdf
###################################################

# Do a pre-clean just to be safe no files are corrupt
if [ "$fast_build" = false ]; then
   FUNCTION_clean_aux_files
fi

# Run the first pdf build attempt - check for errors
printf '(Run:\e[0;34m pdflatex\e[0m) Print PDF, first pass...';
pdflatex -interaction nonstopmode -halt-on-error -file-line-error $input_tex_clean > makePDF.out; 

if [ $? = 0 ] ; then

   if [ "$fast_build" = true ]; then
      FUNCTION_rename_output_pdf
      if [ "$clean_aux" = true ]; then
         FUNCTION_clean_aux_files
      fi
      exit
   else
      # Print first pass successful
      printf '\e[0;32m PDF built successfully! \e[0m \n';
   fi

	# Make the glossaries - only if there are acronyms used
   if [ -s $input_tex_clean.acn ]; then 
      printf '(Run:\e[0;34m makeglossaries\e[0m) Make Glossaries...';
      makeglossaries    $input_tex_clean > /dev/null;
      printf '\e[0;32m Glossaries built successfully! \e[0m \n';
   fi

	# Build bibliographies
   printf '(Run:\e[0;34m bibtex\e[0m)     Make Bibliographies...';
	bibtex 			$input_tex_clean > /dev/null;
	printf '\e[0;32m Bibliographies built successfully! \e[0m \n';

	# Print the final PDF
	printf '(Run:\e[0;34m pdflatex\e[0m) Print PDF, final pass...';
	pdflatex -draftmode    $input_tex_clean  > /dev/null;
	pdflatex               $input_tex_clean  > /dev/null;

   # Rename the output
   FUNCTION_rename_output_pdf

	# Remove all auxiliary files created, keeping just the pdf
	if [ "$clean_aux" = true ]; then
      FUNCTION_clean_aux_files
	fi

else 
   
	printf '\e[1;31m  BUILD ERROR \e[0m \n';

	tail -15 makePDF.out

fi
