#! /usr/bin/env bash
# Usage: ./makePDF example.tex
# Purpose: Single bash script to cleanly build LaTeX PDF and remove auxiliary files

###################################################
# Define function to clean all auxiliary files
###################################################

clean_aux_files () {
   rm -rf *.aux;
   rm -rf *.acn;
   rm -rf *.acr;
   rm -rf *.alg;
   rm -rf *.bbl;
   rm -rf *.lof;
   rm -rf *.out;
   rm -rf *.toc;
   rm -rf *.xdy;
   rm -rf *.log;
   rm -rf *.bib;
   rm -rf *.lot;
   rm -rf *.lot;
   rm -rf *.blg;
   rm -rf *.xml;
   rm -rf *.glsdefs;
   rm -rf *.gz;
   rm -rf *.hst;
   rm -rf *.ver;
}

###################################################
# Define function rename output
###################################################

rename_output_pdf () {
   if [ "$rename_output" = true ]; then
      output_pdf=${OUTPUT}
      output_pdf_clean=${output_pdf%.*};
      mv $input_tex_clean.pdf ${output_pdf_clean}.pdf
      printf '\e[0;32m PDF printed to \e[1;32m%s\e[0m \n' $output_pdf_clean.pdf;
   else
      printf '\e[0;32m PDF printed to \e[1;32m%s\e[0m \n' $input_tex_clean.pdf;
   fi
}


###################################################
# Parse the command line inputs
###################################################

# Strip the input file name of its extension
input_tex=$1;
input_tex_clean=${input_tex%.*};

# Define fast build as false
fast_build=false

for i in "$@"
do
case $i in
   -o=*|--outputname=*)
   OUTPUT="${i#*=}"
   rename_output=true
   shift # -o argument=value
   ;;
   -p=*|--latexpath=*)
   LATEXPATH="${i#*=}"
   shift # -p argument=value
   ;;
   -c*|--clean*)
   clean_output=true
   shift # -c argument=value
   ;;
   -f*|--fast*)
   fast_build=true
   shift # -c argument=value
   ;;
   *)
         # unknown option
   ;;
esac
done

# Get TeX version
tex_version="$(tex --version)";

# Get CentOS Version (for AGDL checking)
if [ -f /etc/redhat-release ]; then
   centosVER="$(cat /etc/redhat-release)";
fi

# Get directory of this script
DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )"

# Recursively add this directory and its sub folders to TeX search path
# Also recursively add the current directory and its sub-folders (where the document is being worked on) 
export TEXINPUTS=$TEXINPUTS:$(find ${DIR} -type d | tr '\n' ':' | sed 's/:$//'):$(find ${PWD} -type d | tr '\n' ':' | sed 's/:$//')
export TEXMFHOME=$TEXMFHOME:$(find ${DIR} -type d | tr '\n' ':' | sed 's/:$//')
export BIBINPUTS=$BIBINPUTS:$(find ${DIR} -type d | tr '\n' ':' | sed 's/:$//')

# Make sure latest version is installed
if [[ $tex_version == *"2015"* ]]; then
    printf  "\t\e[1;34m--- Running TeX Distribution Version 2015 ---\e[0m \n";
else
    # This check is here if running on AGDL
    if [ -d /usr/local/texlive/2015/bin/x86_64-linux ]; then
        # New distribution exists, add to PATH
        PATH=/usr/local/texlive/2015/bin/x86_64-linux:$PATH
        printf  "\t\e[1;34m--- Running TeX Distribution Version 2015 ---\e[0m \n";
    else
        printf '\n\t\e[1;31m!!! Outdated TeX Distribution - Please UPDATE !!!\e[0m \n';
        printf "\e[0;34m(Current Version) Environment \$PATH points to: "; which tex; printf "\e[0m";
        tex --version | head -3 | sed 's/^/  /';
        printf '\n'
        exit 1;
    fi
fi

# Do a pre-clean just to be safe no files are corrupt 
rm -rf *.aux;
rm -rf *.acn;
rm -rf *.acr;
rm -rf *.alg;
rm -rf *.bbl;
rm -rf *.lof;
rm -rf *.out;
rm -rf *.toc;
rm -rf *.xdy;
rm -rf *.log;
rm -rf *.bib;
rm -rf *.lot;
rm -rf *.lot;
rm -rf *.blg;
rm -rf *.xml;
rm -rf *.glsdefs;
rm -rf *.gz;
rm -rf *.hst;
rm -rf *.ver;

# Check if there is a file input, else exit
if [ -z "$1" ]
  then
    printf 'No buildable .tex file supplied as input: e.g.\e[1;34m "./makePDF example.tex"\e[0m \n';
    exit 1
fi

# Run the first pdf build attempt - check for errors
printf '(Run:\e[0;34m pdflatex\e[0m) Print PDF, first pass...';
pdflatex -interaction nonstopmode -halt-on-error -file-line-error $input_tex_clean > makePDF.out; 
if [ $? = 0 ] ; then
	# Print first pass successful
	printf '\e[0;32m PDF built successfully! \e[0m \n';

   if [ "$fast_build" = true ]; then
      rename_output_pdf
      if [ "$clean_output" = true ]; then
         clean_aux_files
      fi
      exit
   fi

	# Make the glossaries - only if there are acronyms used
   if [ -s $input_tex_clean.acn ]; then 
      printf '(Run:\e[0;34m makeglossaries\e[0m) Make Glossaries...';
      makeglossaries    $input_tex_clean > /dev/null;
      printf '\e[0;32m Glossaries built successfully! \e[0m \n';
   fi

	# Build bibliographies
   printf '(Run:\e[0;34m bibtex\e[0m)     Make Bibliographies...';
	bibtex 			$input_tex_clean > /dev/null;
	printf '\e[0;32m Bibliographies built successfully! \e[0m \n';

	# Print the final PDF
	printf '(Run:\e[0;34m pdflatex\e[0m) Print PDF, final pass...';
	pdflatex -draftmode    $input_tex_clean  > /dev/null;
	pdflatex               $input_tex_clean  > /dev/null;

   # Rename the output
   rename_output_pdf

	# Remove all auxiliary files created, keeping just the pdf
	if [ "$clean_output" = true ]; then
      clean_aux_files
	fi

else 
   
	printf '\e[1;31m  BUILD ERROR \e[0m \n';

	tail -15 makePDF.out
fi
